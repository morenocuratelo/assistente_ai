name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Quality checks and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Install quality tools
      run: |
        pip install black isort flake8 mypy bandit interrogate ruff vulture

    - name: Check code formatting (black)
      run: black --check --diff src tests

    - name: Check import sorting (isort)
      run: isort --check-only --diff src tests

    - name: Lint with ruff
      run: ruff check src tests

    - name: Type check with mypy
      run: mypy src

    - name: Security check with bandit
      run: bandit -r src -c pyproject.toml

    - name: Docstring coverage with interrogate
      run: interrogate -c pyproject.toml src

    - name: Dead code detection with vulture
      run: vulture src --min-confidence 80

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov pytest-benchmark pytest-asyncio

    - name: Create test environment
      run: |
        mkdir -p test_results
        mkdir -p htmlcov

    - name: Run unit tests
      run: |
        pytest tests/test_unit_*.py \
          --cov=src \
          --cov-report=xml:test_results/coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --junitxml=test_results/unit_tests.xml \
          -m "unit and not slow"

    - name: Run integration tests
      run: |
        pytest tests/test_integration/ \
          --cov=src \
          --cov-report=xml:test_results/coverage_integration.xml \
          --cov-report=term-missing \
          --junitxml=test_results/integration_tests.xml \
          -m "integration" \
          --maxfail=5

    - name: Run database tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=term-missing \
          --junitxml=test_results/database_tests.xml \
          -m "database" \
          --maxfail=3

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test_results/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          test_results/coverage*.xml

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-benchmark

    - name: Run performance benchmarks
      run: |
        mkdir -p benchmark_results
        pytest tests/test_performance/ \
          --benchmark-json=benchmark_results/benchmark.json \
          --benchmark-sort=mean \
          --benchmark-group-by=func \
          -v

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results/

  # Build and deployment (only on main branch)
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality, test, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Upload to PyPI
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Docker build (only on main branch)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test, performance]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: archivista/ai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Notification on completion
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality, test, performance, build, docker]
    if: always()

    steps:
    - name: Notify success
      if: needs.quality.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ All checks passed! Ready for deployment."

    - name: Notify failure
      if: needs.quality.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1
