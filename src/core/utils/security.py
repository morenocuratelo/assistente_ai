"""Minimal security helper functions for tests."""
import hashlib
import secrets


def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode('utf-8')).hexdigest()


def verify_password(password: str, hashed: str) -> bool:
    return hash_password(password) == hashed


def generate_token(length_or_seed: int | str = 32) -> str:
    """Generate a token.

    Tests sometimes call generate_token(user_id) passing a string seed. Support
    both an integer length and a string seed for determinism in tests.
    """
    if isinstance(length_or_seed, str):
        # Encode seed so that verify_token can recover original user id in tests
        return f"seed:{length_or_seed}"
    length = int(length_or_seed)
    return secrets.token_hex(length // 2)


def verify_token(token: str) -> bool:
    """Very small token verification used for tests (stateless).

    In real application this would check signatures or use JWT; tests only
    require the function to exist and return True for tokens generated by
    generate_token.
    """
    # For test purposes, accept non-empty hex strings
    # If token uses our seeded format, return the seed value for tests
    if isinstance(token, str) and token.startswith("seed:"):
        return token.replace("seed:", "")
    try:
        int(token, 16)
        return True
    except Exception:
        return False


def encrypt_data(data: bytes, key: bytes) -> bytes:
    # Not real encryption; tests expect presence of functions
    return data[::-1]


def decrypt_data(data: bytes, key: bytes) -> bytes:
    return data[::-1]
